name: Playwright Test CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: "22"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Store your Slack Webhook URL as a secret in GitHub
      CONTENT_TYPE: "Content-Type: application/json"
      RESULTS_DIR: "playwright-results"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        npm install -g npm@latest
        npm install -g playwright
        npx playwright --version  # Log the Playwright version
        mkdir -p $RESULTS_DIR  # Create the directory to store test results (if not already exists)
        ls -la $RESULTS_DIR  # List the contents of the directory before running tests for debugging

    - name: Install project dependencies
      run: npm ci

    - name: Run Playwright tests
      run: |
        npx playwright install --with-deps
        npx playwright test --reporter=json --output=$RESULTS_DIR  # Store test results in the created directory
        ls -R $RESULTS_DIR  # Debugging: List the files to verify the presence of individual test result files
        # Check for any .json files inside the subdirectories and create a consolidated results.json
        RESULT_JSON_FILES=$(find $RESULTS_DIR -type f -name "*.json")
        if [ -z "$RESULT_JSON_FILES" ]; then
          echo "Error: No result JSON files found"
          exit 1
        fi

        # Debugging: Print the contents of each result file
        for file in $RESULT_JSON_FILES; do
          echo "File Contents of $file:"
          cat $file
          echo "--------------------"
        done

        # Create a consolidated results.json from all the individual result files
        echo "[" > $RESULTS_DIR/results.json
        for file in $RESULT_JSON_FILES; do
          cat $file >> $RESULTS_DIR/results.json
          echo "," >> $RESULTS_DIR/results.json
        done
        # Remove the last comma and close the array
        sed -i '$ s/,$//' $RESULTS_DIR/results.json
        echo "]" >> $RESULTS_DIR/results.json

    - name: Upload test results as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: playwright-results
        path: $RESULTS_DIR/*

    - name: Check results and send Slack notification
      run: |
        # Check if results.json exists
        if [ ! -f "$RESULTS_DIR/results.json" ]; then
          echo "Error: results.json file not found in $RESULTS_DIR"
          ls -la $RESULTS_DIR  # List files in the results directory for debugging
          exit 1  # Exit the script if results.json is missing
        fi
        # Extract total tests by counting the length of the JSON array
        TOTAL=$(jq 'length' $RESULTS_DIR/results.json)
        # Extract passed, failed, broken, and skipped tests by counting specific statuses
        PASSED=$(jq '[.[] | select(.status == "passed")] | length' $RESULTS_DIR/results.json)
        FAILED=$(jq '[.[] | select(.status == "failed")] | length' $RESULTS_DIR/results.json)
        BROKEN=$(jq '[.[] | select(.status == "broken")] | length' $RESULTS_DIR/results.json)
        SKIP=$(jq '[.[] | select(.status == "skipped")] | length' $RESULTS_DIR/results.json)
        # Extract total test duration (in milliseconds) and convert to minutes and seconds
        DURATION_MS=$(jq '[.[] | select(.duration)] | map(.duration) | add' $RESULTS_DIR/results.json)
        MINS=$((DURATION_MS / 60000))
        SECS=$(( (DURATION_MS % 60000) / 1000 ))

        # Prepare Slack message payload
        RUN_TYPE=${RUN_TYPE:-"PlayWright"}  # Default value if RUN_TYPE is not set
        DATA="{
          \"text\":\"$RUN_TYPE Project Automation test report is generated at 
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n
          *Total: $TOTAL* \n
          *Passed: $PASSED* \n
          *Failed: $FAILED* \n
          *Broken: $BROKEN* \n
          *Skipped: $SKIP* \n
          *Duration: $MINS minutes and $SECS seconds*\",
          \"channel\":\"qa-automation-results\", 
          \"username\":\"GitHub Actions CI\"
        }"

        # Send the test result status to Slack using the webhook
        RESPONSE=$(curl -X POST $SLACK_WEBHOOK_URL -H "$CONTENT_TYPE" --data "$DATA")

        # Log the response from Slack for debugging
        echo "Slack Response: $RESPONSE"
